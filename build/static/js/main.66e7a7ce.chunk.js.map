{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","index.js"],"names":["Node","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","createNode","getNewGridWithWallToggled","newGrid","slice","newNode","PathfindingVisualizer","useState","setGrid","isMousePressed","setIsMousePressed","useEffect","currentRow","console","log","getInitialGrid","animateShortestPath","nodesInShortestPathOrder","i","setTimeout","document","getElementById","visualizeDijkstra","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","Button","variant","onClick","map","rowIdx","nodeIdx","mouseIsPressed","handleMouseDown","handleMouseEnter","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.66e7a7ce.chunk.js","sourcesContent":["import React from 'react'\nimport './Node.css'\n\n\nfunction Node({\n    col,\n    isFinish,\n    isStart,\n    isWall,\n    onMouseDown,\n    onMouseEnter,\n    onMouseUp,\n    row,\n  }) {\n    const extraClassName = isFinish\n    ? 'node-finish'\n    : isStart\n    ? 'node-start'\n    : isWall\n    ? 'node-wall'\n    : '';\n    return (\n        <div\n            id={`node-${row}-${col}`}\n            className={`node ${extraClassName}`}\n            onMouseDown={() => onMouseDown(row, col)}\n            onMouseEnter={() => onMouseEnter(row, col)}\n            onMouseUp={() => onMouseUp()}>\n        </div>\n    )\n}\n\nexport default Node\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {col, row} = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}","import React, { useEffect, useState } from 'react'\nimport Node from './Node/Node'\nimport './PathfindingVisualizer.css'\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\nimport Button from '@mui/material/Button';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nconst getInitialGrid = () => {\n    const grid = []\n    for (let row = 0; row < 20; row++) {\n        const currentRow = []\n        for (let col = 0; col < 50; col++) {\n            currentRow.push(createNode(col, row))\n            console.log(createNode(col, row).isFinish)\n        }\n        grid.push(currentRow)\n    }\n    return grid\n}\n\nconst createNode = (col, row) => {\n    return {\n      col,\n      row,\n      isStart: row === START_NODE_ROW && col === START_NODE_COL,\n      isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n      distance: Infinity,\n      isVisited: false,\n      isWall: false,\n      previousNode: null,\n    };\n  };\n\n  const getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n      ...node,\n      isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };\n\n\nfunction PathfindingVisualizer() {\n    const [grid, setGrid] = useState([])\n    const [isMousePressed, setIsMousePressed] = useState(false)\n\n    useEffect(() => {\n        const newGrid = getInitialGrid()\n        setGrid(newGrid)\n    }, [])\n\n\n\n    const handleMouseDown = (row, col) => {\n        const newGrid = getNewGridWithWallToggled(grid, row, col)\n        setGrid(newGrid)\n        setIsMousePressed(true)\n    }\n\n    const handleMouseEnter = (row, col) => {\n        if (!isMousePressed) return\n        const newGrid = getNewGridWithWallToggled(grid, row, col)\n        setGrid(newGrid)\n    }\n\n    const handleMouseUp = () => {\n        setIsMousePressed(false)\n    }\n\n    const animateDijkstra = (visitedNodesInOrder, nodesInShortestPathOrder) => {\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n          if (i === visitedNodesInOrder.length) {\n            setTimeout(() => {\n              animateShortestPath(nodesInShortestPathOrder);\n            }, 10 * i);\n            return;\n          }\n          setTimeout(() => {\n            const node = visitedNodesInOrder[i];\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n              'node node-visited';\n          }, 10 * i);\n        }\n    }\n    \n    const animateShortestPath = (nodesInShortestPathOrder) => {\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n          setTimeout(() => {\n            const node = nodesInShortestPathOrder[i];\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n              'node node-shortest-path';\n          }, 50 * i);\n        }\n      }\n\n    \n\n    const visualizeDijkstra = () => {\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n        const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n        animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n\n    return (\n        <>\n            <Button variant=\"contained\" onClick={() => {visualizeDijkstra()}}>Visualize Dijkstra's Algorithm</Button>\n            <div className=\"grid\">\n                {grid.map((row, rowIdx) => {\n                    return <div key={rowIdx}>\n                        { \n                            row.map((node, nodeIdx) => {\n                                const {row, col, isFinish, isStart, isWall} = node;\n                                return (\n                                    <Node\n                                        key={nodeIdx}\n                                        col={col}\n                                        isStart={isStart}\n                                        isFinish={isFinish}\n                                        isWall={isWall}\n                                        mouseIsPressed={isMousePressed}\n                                        onMouseDown={(row, col) => handleMouseDown(row, col)}\n                                        onMouseEnter={(row, col) => handleMouseEnter(row, col)}\n                                        onMouseUp={() => handleMouseUp()}\n                                        row={row}\n                                    ></Node>)\n                            })\n                        }\n                    </div>\n                })}\n            </div>\n        </>\n    )\n}\n\nexport default PathfindingVisualizer\n","import './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}